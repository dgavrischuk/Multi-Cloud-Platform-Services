name: 'Deployment Tests'

on:
  push:
    branches:
      - main
      - develop

jobs:
  ############################# Deployment Tests for MCP modules #####################################################
  MCP-tests:
    runs-on: ubuntu-latest

    env:
      working-directory: ./tests/mcp/deployment
      GCP_PROJECT_ID: "mcpdeploytest-${GITHUB_SHA::8}-$(date +%H%M%S)"
      KUBE_CONFIG_PATH: ~/.kube/config

    defaults:
      run:
        shell: bash
        working-directory: ${{env.working-directory}}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      # Install gcloud sdk and set the service account
      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          service_account_key: ${{secrets.GCP_SA_KEY}}
          export_default_credentials: true

      - name: Set constant variables
        id: vars
        run: echo "::set-output name=GCP_PROJECT_ID::${{ env.GCP_PROJECT_ID }}"

      # Create a project and enable billing and other services
      # Configure buckets to be used, constrained to europe-west2 to match organization policies.
      - name: Setup GCP
        run: |
          gcloud projects create ${{ steps.vars.outputs.GCP_PROJECT_ID }} --folder=${{secrets.GCP_FOLDER_ID}} --set-as-default
          gcloud components install beta --quiet
          gcloud beta billing projects link ${{ steps.vars.outputs.GCP_PROJECT_ID }} --billing-account=${{secrets.GCP_BILLING_ID}}
          gcloud services enable cloudresourcemanager.googleapis.com
          gcloud services enable cloudbuild.googleapis.com
          gcloud services enable container.googleapis.com
          gcloud services enable appengine.googleapis.com
          gcloud services enable appengineflex.googleapis.com
          gcloud services enable artifactregistry.googleapis.com
          gcloud services enable run.googleapis.com
          gcloud config set compute/zone europe-west2-a
          gsutil mb -l europe-west2 gs://${{ steps.vars.outputs.GCP_PROJECT_ID }}_bucket
          gsutil mb -l europe-west2 gs://${{ steps.vars.outputs.GCP_PROJECT_ID }}_cloudbuild

      # Create a new service account to be used for deployment
      - name: Create New SA
        run: |
          gcloud iam service

      # Configure yaml files to contain relevant project info
      - name: Add project ID to GCP Files
        run: |
          cd GCP
          echo "name: ${{ steps.vars.outputs.GCP_PROJECT_ID }}_app_bucket" > project.yml
          sed -i "s/<project_id>/${{ steps.vars.outputs.GCP_PROJECT_ID }}/" gcp_ae.yml
          sed -i "s/<image_uri>/europe-west2-docker.pkg.dev\/${{ steps.vars.outputs.GCP_PROJECT_ID }}\/app-repo\/helloworld:latest/" gcp_ae.yml
          sed -i "s/<project_id>/${{ steps.vars.outputs.GCP_PROJECT_ID }}/" gcp_cloudrun.yml


      # Install kubectl and create gke cluster
      - name: setup kubectl
        run: |
          gcloud components install kubectl
          gcloud container clusters create-auto mcpdeploytest-cluster --region=europe-west2
          gcloud container clusters get-credentials mcpdeploytest-cluster --region=europe-west2

      # Setup main.tf, deploy and destroy k8s
      - name: deploy k8s
        run: |
          cd k8s/terraform
          sed -i "s/gcs-bucket-name/${{ steps.vars.outputs.GCP_PROJECT_ID }}_bucket/" main.tf
          sed -i "s/source-path/..\/..\/..\/..\/..\/mcp/" main.tf
          cat main.tf
          terraform init
          terraform plan -out="./plan.tfplan"
          terraform apply plan.tfplan
          terraform plan -destroy -out="./destroy.tfplan"
          terraform apply destroy.tfplan

      # Deploy app image to Artifact Repository
      - name: Build App
        run: |
          cd GCP/app/build/helloworld
          gcloud artifacts repositories create app-repo --repository-format=docker --location=europe-west2 --description="Repository for storing app"
          gcloud builds submit --tag europe-west2-docker.pkg.dev/${{ steps.vars.outputs.GCP_PROJECT_ID }}/app-repo/helloworld

      # Configure yaml files to contain relevant project info
      - name: Add image URI to GCP Files
        run: |
          cd GCP
          sed -i "s/<image_uri>/europe-west2-docker.pkg.dev\/${{ steps.vars.outputs.GCP_PROJECT_ID }}\/app-repo\/helloworld:latest/" gcp_ae.yml
          sed -i "s/<image_uri>/europe-west2-docker.pkg.dev\/${{ steps.vars.outputs.GCP_PROJECT_ID }}\/app-repo\/helloworld:latest/" gcp_cloudrun.yml

      # Setup main.tf and deploy gcp modules. Also plan destroy but don't apply due to app engine issues.
      - name: Deploy GCP modules
        run: |
          cd GCP/terraform
          sleep 5m
          sed -i "s/gcs-bucket-name/${{ steps.vars.outputs.GCP_PROJECT_ID }}_bucket/" main.tf
          sed -i "s/source-path/..\/..\/..\/..\/..\/mcp/" main.tf
          cat main.tf
          terraform init
          terraform plan -out="./plan.tfplan"
          terraform apply plan.tfplan
          terraform plan -destroy -out="./destroy.tfplan"

      - name: delete project
        if : ${{ always() }}
        run: |
          gcloud projects delete ${{ steps.vars.outputs.GCP_PROJECT_ID }}
#          gcloud beta billing projects unlink ${{ steps.vars.outputs.GCP_PROJECT_ID }} #Unlinking billing doesn't seem to be necessary

  ############################# Deployment Tests for GCP Access Context Manager ####################################
  ## Job to check if secret with service account for deploying perimeter exists
  check-vpc-sa:
    runs-on: ubuntu-latest
    outputs:
      sa-exists: ${{ steps.check.outputs.EXISTS }}

    steps:
      - uses: actions/checkout@v2

      - name: Check service account exists
        id: check
        run: |
          if [[ "${{ secrets.GCP_VPC_SA_KEY }}" == *"private_key_id"* ]]; then
            echo ::set-output name=EXISTS::true
          else
            echo ::set-output name=EXISTS::false
          fi

  # If service account exists run this job
  GCP-perimeter-tests:
    runs-on: ubuntu-latest
    needs: check-vpc-sa
    if: needs.check-vpc-sa.outputs.sa-exists == 'true'

    env:
      working-directory: ./tests/gcp/deployment
      NEW_PROJECT_ID: "test-vpc-${GITHUB_SHA::8}-$(date +%H%M%S)"

    defaults:
      run:
        shell: bash
        working-directory: ${{env.working-directory}}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      # Install gcloud sdk and set the service account
      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          service_account_key: ${{secrets.GCP_VPC_SA_KEY}}
          export_default_credentials: true

      - name: Validate Yaml
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML jsonschema
          cd access_context_manager/yaml_validation
          python yaml_validation.py

      - name: Set constant variables
        id: vars
        run: echo "::set-output name=GCP_PROJECT_ID::${{ env.NEW_PROJECT_ID }}"

      - name: Setup GCP
        run: |
          gcloud projects create "${{ steps.vars.outputs.GCP_PROJECT_ID }}-1" --folder=${{secrets.GCP_FOLDER_ID}} --set-as-default
          gcloud components install beta --quiet
          gcloud beta billing projects link ${{ steps.vars.outputs.GCP_PROJECT_ID }}-1 --billing-account=${{secrets.GCP_BILLING_ID}}
          gcloud services enable cloudresourcemanager.googleapis.com
          gcloud projects create "${{ steps.vars.outputs.GCP_PROJECT_ID }}-2" --folder=${{secrets.GCP_FOLDER_ID}} --set-as-default
          gcloud beta billing projects link ${{ steps.vars.outputs.GCP_PROJECT_ID }}-2 --billing-account=${{secrets.GCP_BILLING_ID}}
          gcloud services enable cloudresourcemanager.googleapis.com
          gcloud config set compute/zone europe-west2-a

      - name: Configure files
        run: |
          cd access_context_manager
          PROJECT_1=$( gcloud projects list --filter="${{ steps.vars.outputs.GCP_PROJECT_ID }}-1" --format="value(PROJECT_NUMBER)" )
          PROJECT_2=$( gcloud projects list --filter="${{ steps.vars.outputs.GCP_PROJECT_ID }}-2" --format="value(PROJECT_NUMBER)" )
          sed -i "s|access-policy-name|${{secrets.ACCESS_POLICY}}|" main.tf
          sed -i "s|resources-list|[\"${{steps.vars.outputs.GCP_PROJECT_ID}}-1\",\"${{steps.vars.outputs.GCP_PROJECT_ID}}-2\"]|" main.tf
          sed -i "s|source-path|../../../../gcp/access_context_manager/service_perimeter_regular|" main.tf
          sed -i "s|project-1|${PROJECT_1}|" ingressPolicies.yml
          sed -i "s|project-2|${PROJECT_2}|" ingressPolicies.yml

      - name: Deploy perimeter
        run: |
          cd access_context_manager
          terraform init
          terraform plan -out="./plan.tfplan"
          terraform apply plan.tfplan

      - name: Destroy perimter
        run: |
          cd access_context_manager
          terraform destroy -auto-approve

      - name: delete projects
        if: ${{ always() }}
        run: |
          gcloud projects delete ${{ steps.vars.outputs.GCP_PROJECT_ID }}-1
          gcloud projects delete ${{ steps.vars.outputs.GCP_PROJECT_ID }}-2
#          gcloud beta billing projects unlink ${{ steps.vars.outputs.GCP_PROJECT_ID }}-1
#          gcloud beta billing projects unlink ${{ steps.vars.outputs.GCP_PROJECT_ID }}-2